    precision highp float;
    uniform float iTime;
    uniform vec2 iResolution;
    // === Common ===
    mat4 translate(vec3 v) {
        mat4 m = mat4(1.0);
        m[3].xyz = v;
        return m;
    }
    mat4 scale(vec3 s) {
        return mat4(
            s.x, 0.0, 0.0, 0.0,
            0.0, s.y, 0.0, 0.0,
            0.0, 0.0, s.z, 0.0,
            0.0, 0.0, 0.0, 1.0
        );
    }
    mat4 rotate(float angle, vec3 axis) {
        float c = cos(angle);
        float s = sin(angle);
        vec3  ax = normalize(axis);
        float oc = 1.0 - c;
        return mat4(
            oc * ax.x * ax.x + c,
            oc * ax.x * ax.y + ax.z * s,
            oc * ax.z * ax.x - ax.y * s,
            0.0,
            oc * ax.x * ax.y - ax.z * s,
            oc * ax.y * ax.y + c,
            oc * ax.y * ax.z + ax.x * s,
            0.0,
            oc * ax.z * ax.x + ax.y * s,
            oc * ax.y * ax.z - ax.x * s,
            oc * ax.z * ax.z + c,
            0.0,
            0.0, 0.0, 0.0, 1.0
        );
    }
    // === Image ===
    #define STEPS 5.0
    #define STEP_SIZE 0.1
    float random(in vec2 st) {
        return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);
    }
    float noise(in vec2 st) {
        vec2 i = floor(st);
        vec2 f = fract(st);
        float a = random(i);
        float b = random(i + vec2(1.0, 0.0));
        float c = random(i + vec2(0.0, 1.0));
        float d = random(i + vec2(1.0, 1.0));
        vec2 u = f * f * (3.0 - 2.0 * f);
        u = smoothstep(0.0, 1.0, f);
        return mix(a, b, u.x) +
               (c - a) * u.y * (1.0 - u.x) +
               (d - b) * u.x * u.y;
    }
    mat4 inverseTR(mat4 m) {
      // Extrai a rotação (manual transpose)
      mat3 r = mat3(
          m[0].x, m[1].x, m[2].x,
          m[0].y, m[1].y, m[2].y,
          m[0].z, m[1].z, m[2].z
      );
      // Extrai a translação
      vec3 t = m[3].xyz;
      // Aplica a inversa
      mat4 inv = mat4(1.0);
      inv[0].xyz = r[0];
      inv[1].xyz = r[1];
      inv[2].xyz = r[2];
      inv[3].xyz = -r * t;
      return inv;
  }
    void main() {
        vec2 fragCoord = gl_FragCoord.xy;
        vec2 uv = fragCoord / iResolution.xy;
        vec2 screenPos = uv * 2.0 - 1.0;
        screenPos.x *= iResolution.x / iResolution.y;
        mat4 model = translate(vec3(0.0, 0.0, -2.0)) *
                     rotate(radians(45.0), vec3(0.0, 0.0, -1.0)) *
                     scale(vec3(1.0));
        vec3 rayOrigin = vec3(0.0, 0.0, 0.0);
        vec3 rayDir = normalize(vec3(screenPos, -1.5));
        mat4 invModel = inverseTR(model);
        vec3 localOrigin = (invModel * vec4(rayOrigin, 1.0)).xyz;
        vec3 localDir = normalize((invModel * vec4(rayDir, 0.0)).xyz);
        float t = -localOrigin.z / localDir.z;
        vec3 hit = localOrigin + t * localDir;
        vec2 st = (hit * 7.0 - iTime / 5.0).xy;
        float brightness = 0.0;
        for (float i = 0.0; i < STEPS; i += STEP_SIZE) {
            brightness += noise(vec2(st.x * 0.1 + i, st.y));
        }
        brightness /= iResolution.x * 0.1;
        brightness *= 1.0 - uv.x;
        vec3 godrayColor = brightness * vec3(0.992,0.992,0.486);
        vec3 skyColor = vec3(0.3, 0.4, 0.7);
        vec3 finalColor = skyColor + godrayColor;
        gl_FragColor = vec4(finalColor, 1.0);
    }